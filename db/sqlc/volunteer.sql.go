// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: volunteer.sql

package db

import (
	"context"
	"database/sql"
)

const createVolunteer = `-- name: CreateVolunteer :one
INSERT INTO "volunteer" (name, email, phone, event_id, role, availability) 
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, name, email, phone, event_id, role, availability
`

type CreateVolunteerParams struct {
	Name         string         `json:"name"`
	Email        string         `json:"email"`
	Phone        sql.NullString `json:"phone"`
	EventID      sql.NullInt32  `json:"event_id"`
	Role         sql.NullString `json:"role"`
	Availability sql.NullString `json:"availability"`
}

func (q *Queries) CreateVolunteer(ctx context.Context, arg CreateVolunteerParams) (Volunteer, error) {
	row := q.db.QueryRowContext(ctx, createVolunteer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.EventID,
		arg.Role,
		arg.Availability,
	)
	var i Volunteer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.EventID,
		&i.Role,
		&i.Availability,
	)
	return i, err
}

const deleteVolunteer = `-- name: DeleteVolunteer :exec
DELETE FROM "volunteer" WHERE id=$1
`

func (q *Queries) DeleteVolunteer(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteVolunteer, id)
	return err
}

const listVolunteer = `-- name: ListVolunteer :one
SELECT id, name, email, phone, event_id, role, availability FROM "volunteer"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) ListVolunteer(ctx context.Context, id int32) (Volunteer, error) {
	row := q.db.QueryRowContext(ctx, listVolunteer, id)
	var i Volunteer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.EventID,
		&i.Role,
		&i.Availability,
	)
	return i, err
}

const listVolunteers = `-- name: ListVolunteers :many
SELECT id, name, email, phone, event_id, role, availability FROM "volunteer" ORDER BY "id" LIMIT $1 OFFSET $2
`

type ListVolunteersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListVolunteers(ctx context.Context, arg ListVolunteersParams) ([]Volunteer, error) {
	rows, err := q.db.QueryContext(ctx, listVolunteers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Volunteer
	for rows.Next() {
		var i Volunteer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.EventID,
			&i.Role,
			&i.Availability,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVolunteer = `-- name: UpdateVolunteer :one
UPDATE "volunteer" 
SET name=$1, email=$2, phone=$3, event_id=$4, role=$5, availability=$6 
WHERE id=$7 RETURNING id, name, email, phone, event_id, role, availability
`

type UpdateVolunteerParams struct {
	Name         string         `json:"name"`
	Email        string         `json:"email"`
	Phone        sql.NullString `json:"phone"`
	EventID      sql.NullInt32  `json:"event_id"`
	Role         sql.NullString `json:"role"`
	Availability sql.NullString `json:"availability"`
	ID           int32          `json:"id"`
}

func (q *Queries) UpdateVolunteer(ctx context.Context, arg UpdateVolunteerParams) (Volunteer, error) {
	row := q.db.QueryRowContext(ctx, updateVolunteer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.EventID,
		arg.Role,
		arg.Availability,
		arg.ID,
	)
	var i Volunteer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.EventID,
		&i.Role,
		&i.Availability,
	)
	return i, err
}
