// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: organizer.sql

package db

import (
	"context"
	"database/sql"
)

const createOrganizer = `-- name: CreateOrganizer :one
INSERT INTO "organizer" (
  "name",
  "email",
  "phone",
  "company",
  "logo",
  "address"
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
) RETURNING id, name, email, phone, company, logo, address
`

type CreateOrganizerParams struct {
	Name    string         `json:"name"`
	Email   string         `json:"email"`
	Phone   sql.NullString `json:"phone"`
	Company sql.NullString `json:"company"`
	Logo    []byte         `json:"logo"`
	Address sql.NullString `json:"address"`
}

func (q *Queries) CreateOrganizer(ctx context.Context, arg CreateOrganizerParams) (Organizer, error) {
	row := q.db.QueryRowContext(ctx, createOrganizer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Company,
		arg.Logo,
		arg.Address,
	)
	var i Organizer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Company,
		&i.Logo,
		&i.Address,
	)
	return i, err
}

const deleteOrganizer = `-- name: DeleteOrganizer :exec
DELETE FROM "organizer"
WHERE "id" = $1
`

func (q *Queries) DeleteOrganizer(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrganizer, id)
	return err
}

const listOrganizer = `-- name: ListOrganizer :one
SELECT id, name, email, phone, company, logo, address
FROM "organizer"
WHERE "id" = $1
`

func (q *Queries) ListOrganizer(ctx context.Context, id int32) (Organizer, error) {
	row := q.db.QueryRowContext(ctx, listOrganizer, id)
	var i Organizer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Company,
		&i.Logo,
		&i.Address,
	)
	return i, err
}

const listOrganizers = `-- name: ListOrganizers :many
SELECT id, name, email, phone, company, logo, address
FROM "organizer"
ORDER BY "id"
LIMIT $1
OFFSET $2
`

type ListOrganizersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrganizers(ctx context.Context, arg ListOrganizersParams) ([]Organizer, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organizer
	for rows.Next() {
		var i Organizer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Company,
			&i.Logo,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganizer = `-- name: UpdateOrganizer :one
UPDATE "organizer"
SET
  "name" =  $2,
  "email" = $3,
  "phone" = $4,
  "company" = $5,
  "logo" = $6,
  "address" = $7
WHERE "id" = $1
RETURNING id, name, email, phone, company, logo, address
`

type UpdateOrganizerParams struct {
	ID      int32          `json:"id"`
	Name    string         `json:"name"`
	Email   string         `json:"email"`
	Phone   sql.NullString `json:"phone"`
	Company sql.NullString `json:"company"`
	Logo    []byte         `json:"logo"`
	Address sql.NullString `json:"address"`
}

func (q *Queries) UpdateOrganizer(ctx context.Context, arg UpdateOrganizerParams) (Organizer, error) {
	row := q.db.QueryRowContext(ctx, updateOrganizer,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Company,
		arg.Logo,
		arg.Address,
	)
	var i Organizer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Company,
		&i.Logo,
		&i.Address,
	)
	return i, err
}
