// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: speaker.sql

package db

import (
	"context"
	"database/sql"
)

const createSpeaker = `-- name: CreateSpeaker :one
INSERT INTO "speaker" (
"name",
"email",
"phone",
"event_id",
"profile_image",
"bio"
) VALUES (
$1,
$2,
$3,
$4,
$5,
$6
) RETURNING id, name, email, phone, event_id, profile_image, bio
`

type CreateSpeakerParams struct {
	Name         string         `json:"name"`
	Email        string         `json:"email"`
	Phone        sql.NullString `json:"phone"`
	EventID      sql.NullInt32  `json:"event_id"`
	ProfileImage []byte         `json:"profile_image"`
	Bio          sql.NullString `json:"bio"`
}

func (q *Queries) CreateSpeaker(ctx context.Context, arg CreateSpeakerParams) (Speaker, error) {
	row := q.db.QueryRowContext(ctx, createSpeaker,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.EventID,
		arg.ProfileImage,
		arg.Bio,
	)
	var i Speaker
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.EventID,
		&i.ProfileImage,
		&i.Bio,
	)
	return i, err
}

const deleteSpeaker = `-- name: DeleteSpeaker :exec
DELETE FROM "speaker" WHERE "id" = $1
`

func (q *Queries) DeleteSpeaker(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSpeaker, id)
	return err
}

const listSpeaker = `-- name: ListSpeaker :one
SELECT id, name, email, phone, event_id, profile_image, bio FROM "speaker" WHERE "id" = $1 LIMIT 1
`

func (q *Queries) ListSpeaker(ctx context.Context, id int32) (Speaker, error) {
	row := q.db.QueryRowContext(ctx, listSpeaker, id)
	var i Speaker
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.EventID,
		&i.ProfileImage,
		&i.Bio,
	)
	return i, err
}

const listSpeakers = `-- name: ListSpeakers :many
SELECT id, name, email, phone, event_id, profile_image, bio FROM "speaker" ORDER BY "id" LIMIT $1 OFFSET $2
`

type ListSpeakersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSpeakers(ctx context.Context, arg ListSpeakersParams) ([]Speaker, error) {
	rows, err := q.db.QueryContext(ctx, listSpeakers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Speaker
	for rows.Next() {
		var i Speaker
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.EventID,
			&i.ProfileImage,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpeaker = `-- name: UpdateSpeaker :one
UPDATE "speaker"
SET
"name" = $1,
"email" = $2,
"phone" = $3,
"event_id" = $4,
"profile_image" = $5,
"bio" = $6
WHERE "id" = $7 RETURNING id, name, email, phone, event_id, profile_image, bio
`

type UpdateSpeakerParams struct {
	Name         string         `json:"name"`
	Email        string         `json:"email"`
	Phone        sql.NullString `json:"phone"`
	EventID      sql.NullInt32  `json:"event_id"`
	ProfileImage []byte         `json:"profile_image"`
	Bio          sql.NullString `json:"bio"`
	ID           int32          `json:"id"`
}

func (q *Queries) UpdateSpeaker(ctx context.Context, arg UpdateSpeakerParams) (Speaker, error) {
	row := q.db.QueryRowContext(ctx, updateSpeaker,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.EventID,
		arg.ProfileImage,
		arg.Bio,
		arg.ID,
	)
	var i Speaker
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.EventID,
		&i.ProfileImage,
		&i.Bio,
	)
	return i, err
}
