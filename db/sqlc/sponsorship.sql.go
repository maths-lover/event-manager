// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: sponsorship.sql

package db

import (
	"context"
	"database/sql"
)

const createSponsorship = `-- name: CreateSponsorship :one
INSERT INTO "sponsorship" ("event_id", "company_name", "contact_person", "email", "phone", "package")
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, event_id, company_name, contact_person, email, phone, package
`

type CreateSponsorshipParams struct {
	EventID       sql.NullInt32  `json:"event_id"`
	CompanyName   string         `json:"company_name"`
	ContactPerson string         `json:"contact_person"`
	Email         string         `json:"email"`
	Phone         sql.NullString `json:"phone"`
	Package       sql.NullString `json:"package"`
}

func (q *Queries) CreateSponsorship(ctx context.Context, arg CreateSponsorshipParams) (Sponsorship, error) {
	row := q.db.QueryRowContext(ctx, createSponsorship,
		arg.EventID,
		arg.CompanyName,
		arg.ContactPerson,
		arg.Email,
		arg.Phone,
		arg.Package,
	)
	var i Sponsorship
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.CompanyName,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Package,
	)
	return i, err
}

const deleteSponsorship = `-- name: DeleteSponsorship :exec
DELETE FROM "sponsorship" WHERE "id" = $1
`

func (q *Queries) DeleteSponsorship(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSponsorship, id)
	return err
}

const listSponsorship = `-- name: ListSponsorship :one
SELECT id, event_id, company_name, contact_person, email, phone, package FROM "sponsorship" WHERE "id" = $1 LIMIT 1
`

func (q *Queries) ListSponsorship(ctx context.Context, id int32) (Sponsorship, error) {
	row := q.db.QueryRowContext(ctx, listSponsorship, id)
	var i Sponsorship
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.CompanyName,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Package,
	)
	return i, err
}

const listSponsorships = `-- name: ListSponsorships :many
SELECT id, event_id, company_name, contact_person, email, phone, package FROM "sponsorship" ORDER BY "id" LIMIT $1 OFFSET $2
`

type ListSponsorshipsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSponsorships(ctx context.Context, arg ListSponsorshipsParams) ([]Sponsorship, error) {
	rows, err := q.db.QueryContext(ctx, listSponsorships, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sponsorship
	for rows.Next() {
		var i Sponsorship
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.CompanyName,
			&i.ContactPerson,
			&i.Email,
			&i.Phone,
			&i.Package,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSponsorship = `-- name: UpdateSponsorship :one
UPDATE "sponsorship"
SET "event_id" = $2, "company_name" = $3, "contact_person" = $4, "email" = $5, "phone" = $6, "package" = $7
WHERE "id" = $1 RETURNING id, event_id, company_name, contact_person, email, phone, package
`

type UpdateSponsorshipParams struct {
	ID            int32          `json:"id"`
	EventID       sql.NullInt32  `json:"event_id"`
	CompanyName   string         `json:"company_name"`
	ContactPerson string         `json:"contact_person"`
	Email         string         `json:"email"`
	Phone         sql.NullString `json:"phone"`
	Package       sql.NullString `json:"package"`
}

func (q *Queries) UpdateSponsorship(ctx context.Context, arg UpdateSponsorshipParams) (Sponsorship, error) {
	row := q.db.QueryRowContext(ctx, updateSponsorship,
		arg.ID,
		arg.EventID,
		arg.CompanyName,
		arg.ContactPerson,
		arg.Email,
		arg.Phone,
		arg.Package,
	)
	var i Sponsorship
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.CompanyName,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.Package,
	)
	return i, err
}
