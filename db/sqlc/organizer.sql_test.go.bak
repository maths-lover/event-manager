// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: organizer.sql

package db

import (
	"context"
	"database/sql"
	"reflect"
	"testing"
)

func TestQueries_CreateOrganizer(t *testing.T) {
	type args struct {
		ctx context.Context
		arg CreateOrganizerParams
	}
	tests := []struct {
		name    string
		args    args
		want    CreateOrganizerRow
		wantErr bool
	}{
		// TODO: Add test cases.
		{
			name: "Create Organizer1",
			args: args{
				ctx: context.Background(),
				arg: CreateOrganizerParams{
					Name:  "Organizer 1",
					Email: "organizer1@mail.com",
					Phone: sql.NullString{
						Valid: false,
					},
					Company: sql.NullString{
						Valid: false,
					},
					Logo: []byte("logo"),
					Address: sql.NullString{
						Valid: false,
					},
				},
			},
			want: CreateOrganizerRow{
				Name:  "Organizer 1",
				Email: "organizer1@mail.com",
				Phone: sql.NullString{
					Valid: false,
				},
				Company: sql.NullString{
					Valid: false,
				},
				Logo: []byte("logo"),
				Address: sql.NullString{
					Valid: false,
				},
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			q := testQueries
			got, err := q.CreateOrganizer(tt.args.ctx, tt.args.arg)
			if (err != nil) != tt.wantErr {
				t.Errorf("Queries.CreateOrganizer() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Queries.CreateOrganizer() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestQueries_DeleteOrganizer(t *testing.T) {
	type args struct {
		ctx context.Context
		id  int32
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			q := testQueries
			if err := q.DeleteOrganizer(tt.args.ctx, tt.args.id); (err != nil) != tt.wantErr {
				t.Errorf("Queries.DeleteOrganizer() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestQueries_ListOrganizer(t *testing.T) {
	type fields struct {
		db DBTX
	}
	type args struct {
		ctx context.Context
		id  int32
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    Organizer
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			q := &Queries{
				db: tt.fields.db,
			}
			got, err := q.ListOrganizer(tt.args.ctx, tt.args.id)
			if (err != nil) != tt.wantErr {
				t.Errorf("Queries.ListOrganizer() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Queries.ListOrganizer() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestQueries_ListOrganizers(t *testing.T) {
	type fields struct {
		db DBTX
	}
	type args struct {
		ctx context.Context
		arg ListOrganizersParams
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    []Organizer
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			q := &Queries{
				db: tt.fields.db,
			}
			got, err := q.ListOrganizers(tt.args.ctx, tt.args.arg)
			if (err != nil) != tt.wantErr {
				t.Errorf("Queries.ListOrganizers() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Queries.ListOrganizers() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestQueries_UpdateOrganizer(t *testing.T) {
	type fields struct {
		db DBTX
	}
	type args struct {
		ctx context.Context
		arg UpdateOrganizerParams
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    UpdateOrganizerRow
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			q := &Queries{
				db: tt.fields.db,
			}
			got, err := q.UpdateOrganizer(tt.args.ctx, tt.args.arg)
			if (err != nil) != tt.wantErr {
				t.Errorf("Queries.UpdateOrganizer() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Queries.UpdateOrganizer() = %v, want %v", got, tt.want)
			}
		})
	}
}
