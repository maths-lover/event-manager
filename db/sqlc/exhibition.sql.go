// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: exhibition.sql

package db

import (
	"context"
	"database/sql"
)

const createExhibition = `-- name: CreateExhibition :one
INSERT INTO exhibition (event_id, company_name, contact_person, email, phone, booth_number, floor_plan) 
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, event_id, company_name, contact_person, email, phone, booth_number, floor_plan
`

type CreateExhibitionParams struct {
	EventID       sql.NullInt32  `json:"event_id"`
	CompanyName   string         `json:"company_name"`
	ContactPerson string         `json:"contact_person"`
	Email         string         `json:"email"`
	Phone         sql.NullString `json:"phone"`
	BoothNumber   sql.NullString `json:"booth_number"`
	FloorPlan     []byte         `json:"floor_plan"`
}

func (q *Queries) CreateExhibition(ctx context.Context, arg CreateExhibitionParams) (Exhibition, error) {
	row := q.db.QueryRowContext(ctx, createExhibition,
		arg.EventID,
		arg.CompanyName,
		arg.ContactPerson,
		arg.Email,
		arg.Phone,
		arg.BoothNumber,
		arg.FloorPlan,
	)
	var i Exhibition
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.CompanyName,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.BoothNumber,
		&i.FloorPlan,
	)
	return i, err
}

const deleteExhibition = `-- name: DeleteExhibition :exec
DELETE FROM exhibition WHERE id = $1
`

func (q *Queries) DeleteExhibition(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteExhibition, id)
	return err
}

const listExhibition = `-- name: ListExhibition :one
SELECT id, event_id, company_name, contact_person, email, phone, booth_number, floor_plan FROM exhibition WHERE id = $1 LIMIT 1
`

func (q *Queries) ListExhibition(ctx context.Context, id int32) (Exhibition, error) {
	row := q.db.QueryRowContext(ctx, listExhibition, id)
	var i Exhibition
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.CompanyName,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.BoothNumber,
		&i.FloorPlan,
	)
	return i, err
}

const listExhibitions = `-- name: ListExhibitions :many
SELECT id, event_id, company_name, contact_person, email, phone, booth_number, floor_plan FROM exhibition ORDER BY "id" LIMIT $1 OFFSET $2
`

type ListExhibitionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListExhibitions(ctx context.Context, arg ListExhibitionsParams) ([]Exhibition, error) {
	rows, err := q.db.QueryContext(ctx, listExhibitions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exhibition
	for rows.Next() {
		var i Exhibition
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.CompanyName,
			&i.ContactPerson,
			&i.Email,
			&i.Phone,
			&i.BoothNumber,
			&i.FloorPlan,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExhibition = `-- name: UpdateExhibition :one
UPDATE exhibition 
SET event_id = $1, company_name = $2, contact_person = $3, email = $4, phone = $5, booth_number = $6, floor_plan = $7 
WHERE id = $8 RETURNING id, event_id, company_name, contact_person, email, phone, booth_number, floor_plan
`

type UpdateExhibitionParams struct {
	EventID       sql.NullInt32  `json:"event_id"`
	CompanyName   string         `json:"company_name"`
	ContactPerson string         `json:"contact_person"`
	Email         string         `json:"email"`
	Phone         sql.NullString `json:"phone"`
	BoothNumber   sql.NullString `json:"booth_number"`
	FloorPlan     []byte         `json:"floor_plan"`
	ID            int32          `json:"id"`
}

func (q *Queries) UpdateExhibition(ctx context.Context, arg UpdateExhibitionParams) (Exhibition, error) {
	row := q.db.QueryRowContext(ctx, updateExhibition,
		arg.EventID,
		arg.CompanyName,
		arg.ContactPerson,
		arg.Email,
		arg.Phone,
		arg.BoothNumber,
		arg.FloorPlan,
		arg.ID,
	)
	var i Exhibition
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.CompanyName,
		&i.ContactPerson,
		&i.Email,
		&i.Phone,
		&i.BoothNumber,
		&i.FloorPlan,
	)
	return i, err
}
