// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO "session" (title, description, date_time, venue, event_id, speaker_id)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, title, description, date_time, venue, event_id, speaker_id
`

type CreateSessionParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	DateTime    time.Time      `json:"date_time"`
	Venue       sql.NullString `json:"venue"`
	EventID     sql.NullInt32  `json:"event_id"`
	SpeakerID   sql.NullInt32  `json:"speaker_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Title,
		arg.Description,
		arg.DateTime,
		arg.Venue,
		arg.EventID,
		arg.SpeakerID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DateTime,
		&i.Venue,
		&i.EventID,
		&i.SpeakerID,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM "session" WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const listSession = `-- name: ListSession :one
SELECT id, title, description, date_time, venue, event_id, speaker_id FROM "session" WHERE id = $1 LIMIT 1
`

func (q *Queries) ListSession(ctx context.Context, id int32) (Session, error) {
	row := q.db.QueryRowContext(ctx, listSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DateTime,
		&i.Venue,
		&i.EventID,
		&i.SpeakerID,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT id, title, description, date_time, venue, event_id, speaker_id FROM "session" ORDER BY "id" LIMIT $1 OFFSET $2
`

type ListSessionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSessions(ctx context.Context, arg ListSessionsParams) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listSessions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.DateTime,
			&i.Venue,
			&i.EventID,
			&i.SpeakerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :one
UPDATE "session" SET title = $1, description = $2, date_time = $3, venue = $4, event_id = $5, speaker_id = $6
WHERE id = $7 RETURNING id, title, description, date_time, venue, event_id, speaker_id
`

type UpdateSessionParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	DateTime    time.Time      `json:"date_time"`
	Venue       sql.NullString `json:"venue"`
	EventID     sql.NullInt32  `json:"event_id"`
	SpeakerID   sql.NullInt32  `json:"speaker_id"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSession,
		arg.Title,
		arg.Description,
		arg.DateTime,
		arg.Venue,
		arg.EventID,
		arg.SpeakerID,
		arg.ID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DateTime,
		&i.Venue,
		&i.EventID,
		&i.SpeakerID,
	)
	return i, err
}
