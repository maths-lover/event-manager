// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: attendee.sql

package db

import (
	"context"
	"database/sql"
)

const createAttendee = `-- name: CreateAttendee :one
INSERT INTO attendee (name, email, phone, event_id, ticket_number, payment_status, payment_date) 
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, name, email, phone, event_id, ticket_number, payment_status, payment_date
`

type CreateAttendeeParams struct {
	Name          string         `json:"name"`
	Email         string         `json:"email"`
	Phone         sql.NullString `json:"phone"`
	EventID       sql.NullInt32  `json:"event_id"`
	TicketNumber  sql.NullString `json:"ticket_number"`
	PaymentStatus sql.NullBool   `json:"payment_status"`
	PaymentDate   sql.NullTime   `json:"payment_date"`
}

func (q *Queries) CreateAttendee(ctx context.Context, arg CreateAttendeeParams) (Attendee, error) {
	row := q.db.QueryRowContext(ctx, createAttendee,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.EventID,
		arg.TicketNumber,
		arg.PaymentStatus,
		arg.PaymentDate,
	)
	var i Attendee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.EventID,
		&i.TicketNumber,
		&i.PaymentStatus,
		&i.PaymentDate,
	)
	return i, err
}

const deleteAttendee = `-- name: DeleteAttendee :exec
DELETE FROM attendee WHERE id = $1
`

func (q *Queries) DeleteAttendee(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAttendee, id)
	return err
}

const listAttendee = `-- name: ListAttendee :one
SELECT id, name, email, phone, event_id, ticket_number, payment_status, payment_date FROM attendee WHERE id = $1 LIMIT 1
`

func (q *Queries) ListAttendee(ctx context.Context, id int32) (Attendee, error) {
	row := q.db.QueryRowContext(ctx, listAttendee, id)
	var i Attendee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.EventID,
		&i.TicketNumber,
		&i.PaymentStatus,
		&i.PaymentDate,
	)
	return i, err
}

const listAttendees = `-- name: ListAttendees :many
SELECT id, name, email, phone, event_id, ticket_number, payment_status, payment_date FROM attendee ORDER BY "id" LIMIT $1 OFFSET $2
`

type ListAttendeesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAttendees(ctx context.Context, arg ListAttendeesParams) ([]Attendee, error) {
	rows, err := q.db.QueryContext(ctx, listAttendees, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attendee
	for rows.Next() {
		var i Attendee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.EventID,
			&i.TicketNumber,
			&i.PaymentStatus,
			&i.PaymentDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttendee = `-- name: UpdateAttendee :one
UPDATE attendee 
SET name = $1, email = $2, phone = $3, event_id = $4, ticket_number = $5, payment_status = $6, payment_date = $7
WHERE id = $8 RETURNING id, name, email, phone, event_id, ticket_number, payment_status, payment_date
`

type UpdateAttendeeParams struct {
	Name          string         `json:"name"`
	Email         string         `json:"email"`
	Phone         sql.NullString `json:"phone"`
	EventID       sql.NullInt32  `json:"event_id"`
	TicketNumber  sql.NullString `json:"ticket_number"`
	PaymentStatus sql.NullBool   `json:"payment_status"`
	PaymentDate   sql.NullTime   `json:"payment_date"`
	ID            int32          `json:"id"`
}

func (q *Queries) UpdateAttendee(ctx context.Context, arg UpdateAttendeeParams) (Attendee, error) {
	row := q.db.QueryRowContext(ctx, updateAttendee,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.EventID,
		arg.TicketNumber,
		arg.PaymentStatus,
		arg.PaymentDate,
		arg.ID,
	)
	var i Attendee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.EventID,
		&i.TicketNumber,
		&i.PaymentStatus,
		&i.PaymentDate,
	)
	return i, err
}
