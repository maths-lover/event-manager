// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: event.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO event (
  title,
  description,
  venue,
  type,
  organizer_id
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, title, description, date_time, venue, type, organizer_id
`

type CreateEventParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Venue       sql.NullString `json:"venue"`
	Type        sql.NullString `json:"type"`
	OrganizerID sql.NullInt32  `json:"organizer_id"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.Title,
		arg.Description,
		arg.Venue,
		arg.Type,
		arg.OrganizerID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DateTime,
		&i.Venue,
		&i.Type,
		&i.OrganizerID,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM "event" WHERE "id" = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const listEvent = `-- name: ListEvent :one
SELECT id, title, description, date_time, venue, type, organizer_id FROM event
WHERE id = $1 LIMIT 1
`

func (q *Queries) ListEvent(ctx context.Context, id int32) (Event, error) {
	row := q.db.QueryRowContext(ctx, listEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DateTime,
		&i.Venue,
		&i.Type,
		&i.OrganizerID,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, title, description, date_time, venue, type, organizer_id FROM event
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.DateTime,
			&i.Venue,
			&i.Type,
			&i.OrganizerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE "event" SET
"title" = $2,
"description" = $3,
"date_time" = $4,
"venue" = $5,
"type" = $6,
"organizer_id" = $7
WHERE "id" = $1
RETURNING id, title, description, date_time, venue, type, organizer_id
`

type UpdateEventParams struct {
	ID          int32          `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	DateTime    time.Time      `json:"date_time"`
	Venue       sql.NullString `json:"venue"`
	Type        sql.NullString `json:"type"`
	OrganizerID sql.NullInt32  `json:"organizer_id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.DateTime,
		arg.Venue,
		arg.Type,
		arg.OrganizerID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DateTime,
		&i.Venue,
		&i.Type,
		&i.OrganizerID,
	)
	return i, err
}
